/**
 * Constraint object constructor is in ./constraint_helper/constraint_list.js
 * newConstraint function is in ./constraint_helper/new_constraint.js
 */

var fingerprint_lookup = {};

function searchSlot(t, day) {
  for (var i = 0; i < cur_schedule.sections.length; ++i) {
    var section = cur_schedule["sections"][i];
    console.log("found");
    if (section["days"].indexOf(day) >= 0) {
      if (section["time_start"] === t) {
        return section['name'] + '<br />' + section['time_start'] + ' - ' + section['time_end'];
      }
    }
  }
  return;
}

function searchSlotMon(t) {
  return searchSlot(t, 'M');
}

function searchSlotTues(t) {
  return searchSlot(t, 'T');
}

function searchSlotWed(t) {
  return searchSlot(t, 'W');
}

function searchSlotThur(t) {
  return searchSlot(t, 'R');
}

function searchSlotFri(t) {
  return searchSlot(t, 'F');
}

function ids_for_section(section) {
  var fingerprint = section["time_start"] + section["time_end"];
  var days = section["days"].split('');
  return $.grep($.map(days, function(day, idx) {
    var day_finger = day + fingerprint;
    if (day_finger in fingerprint_lookup) {
      return fingerprint_lookup[day_finger];
    }
    return null;
  }), function(val, idx) {
    return !(val === null);
  });
}

function reload(schedule_hash) {
  for (var i = 0; i < cur_ids.length; ++i) {
    $(cur_ids[i]).html('');
  }
  var sections = schedule_hash["sections"];
  for (var i = 0; i < sections.length; ++i) {
    var section = sections[i];
    var ids = ids_for_section(section);
    for (var j = 0; j < ids.length; ++j) {
      var id = ids[j];
      $(id).html(html_for_section(section));
    }
  }
}


var num_constraint = 0;
var constraints = [];
var exclusion = {'by_click': [], 'by_input': []};
var inclusion = {'type': 'specified', 'courses': [], 'sections': []};

/**
 * ==Not Necessary==
 * May remove next time
 * 
 * Convert Relation into simbolic form
 */
function getRelation (ind) {
  var relation = $('#relation_' + ind).val();
  var string = '';
  if (relation === 'within') {
    string += "\=";
  }
  else if (relation === 'less than') {
    string += "\<\=";
  }
  else if (relation === 'greater than') {
    string += "\>\=";
  }
  return string;
}

/**
 * Get Days from a set of Day Buttons
 *
 * return a string (eg. MTW)
 */
function getDays(type, i) {
  string = '';
  $('#' + type + '_' + i + ' .btn.active').each(function () {
    string += this.value;
  });
  return string;
}

/**
 * Binded to "Show Me My Option"
 * 
 * 1. Send the array of JSON object created by
 *    getConstraints() function
 *
 * 2. Get data on Success and print the schedule
 *    ** See print_recommendation.js
 *
 * The format of JSON received is:
 *
 */
function getRecommendation() {

  /**
   * Initialize page
   */
  $.each(constraints, function (index, value) {
    $('#constraint_row_' + index).removeClass('error');
    $('#err_' + index).html('');
  })

  $('#recommendations').html('');

  /**
   * Get an array of constraints
   * As JSON
   */
  var constraints_array = getConstraints();

  $('#string').html(JSON.stringify(constraints_array));

  /**
   * Function onSuccess
   * Receiving data from server, retrive from 'data' parameter
   */
  function onSuccess (data) {
    if (data.length < 1) {
      $('#recommendations').html('Fail');
      return;
    }
    exclusion.by_input = [];
    inclusion.courses = [];
    inclusion.sections = [];
    console.log("Print");
    print_recommendation(data);
    // $('#string').html(JSON.stringify(data));

    var exclusion_list = '';
    if (exclusion.by_click.length != 0) {
      exclusion_list += '<table class="table table-hover table-bordered">';
      exclusion_list +=   '<thead>';
      exclusion_list +=     '<tr><td colspan="2">Exclusion List</td></tr>';
      exclusion_list +=   '</thead>';
      exclusion_list += '<tbody>';
      for (var i = 0; i < exclusion.by_click.length; i++) {
        exclusion_list += '<tr><td>' + exclusion.by_click[i] + '</td><td><a role="button" class="btn btn-danger" id="delete_exclusion_' + i + '">Delete</a></td></tr>'
      }
      exclusion_list += '</tbody></table>';
    }

    $('#exclusion_list').html(exclusion_list);

    $.each(exclusion.by_click, function(index, value) {
      $('#delete_exclusion_' + index).bind('click', function (event) {
        exclusion.by_click = jQuery.grep(exclusion.by_click, function(v) {
          return value != v;
        });
        getRecommendation();
      });
    });

    $.each(data, function(index, value) {
      $.each(value, function(i, v) {
        $('a.No_' + v.name).bind('click', function (event) {
          console.log("No Class " + v.name);
          exclusion.by_click.push(v.name);
          getRecommendation();
        });
      });
    });


    $('#save_btn').bind('click', function (event) {
      var name = $("#name_of_save").val();
      if (name === null) {name = "";}
      var sections = $.map(data, function(val){return val["spire_id"];});
      var request = {'name': name, 'sections': sections};
      $('#string').append('<pre>' + JSON.stringify(request) + '</pre><br />');
      $.ajax({
        type: 'POST',
        contentType: "application/json",
        url: "/schedule/create", data: JSON.stringify(request),
        success: function(response) {
          var success = response["success"];
          if (success === true) {
            window.location = "/schedule";
          }
        },
        dataType: "json"
      });
    });
  }

  function onSend() {
    $('#recommendations').html("Please wait... I am looking for schedule which is suitable for you :)");
  }
  
  $.ajax({
    type: 'POST',
    contentType: "application/json",
    url: "/schedule/generate.json", data: JSON.stringify(constraints_array),
    success: onSuccess,
    beforeSend: onSend,
    ajaxError: function () {
      console.log("error");
    },
    dataType: "json"
  });
}
$('#getrecommend').bind('click', getRecommendation);
$('#constraint').prop('selectedIndex', -1)